// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.microsoft.accessibilityinsightsforandroidservice"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode project.hasProperty("apkVersionCode") ? project.findProperty("apkVersionCode").toInteger() : 1
        versionName project.findProperty("apkVersionName") ?: "DEVELOPMENT"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable false
            buildConfigField "Boolean", "DEBUG_MODE", "false"
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable true
            buildConfigField "Boolean", "DEBUG_MODE", "true"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        checkAllWarnings true
        warningsAsErrors true
        abortOnError true

        // GradleDependency and OldTargetApi can start breaking build-over-build due to external
        // dependency updates, so we treat them as non-fatal to ensure build reproducibility.
        //
        // UnknownNullness is grandfathered in as non-fatal only because it already had hundreds
        // of true positives at the time we enabled warnings-as-errors. It would improve the
        // codebase to fix all the warnings it generates and make it fatal.
        warning 'GradleDependency', 'OldTargetApi', 'UnknownNullness'

        // ConvertToWebp is a false positive; it triggers against our launcher icon PNG files, even
        // though the rule documentation explains that launcher icons must be PNGs and cannot be
        // converted to Webp.
        //
        // GoogleAppIndexWarning is irrelevant to us; we don't ship to the store and don't care if
        // it can index us, and it's intentional that we don't have a launchable home activity.
        //
        // SyntheticAccessor is a legitimate performance warning, but one which is not significant
        // for a project of our small size (it's only relevant once a project starts bumping up
        // against the 64K total method limit for jar files).
        //
        // UnsafeExperimentalUsageError and UnsafeExperimentalUsageWarning are incomplete,
        // experimental rules that trigger other false positive warnings if enabled.
        ignore 'ConvertToWebp', 'GoogleAppIndexingWarning', 'SyntheticAccessor', 'UnsafeExperimentalUsageError', 'UnsafeExperimentalUsageWarning'
    }
    testOptions.unitTests.all {
        // This is a workaround for https://github.com/powermock/powermock/issues/969, based on
        // comment https://github.com/powermock/powermock/issues/969#issuecomment-841267805
        jvmArgs "--illegal-access=warn",
                "--add-opens","java.logging/java.util.logging=ALL-UNNAMED",
                "--add-opens","java.base/java.time.zone=ALL-UNNAMED",
                "--add-opens","java.base/java.lang.reflect=ALL-UNNAMED",
                "--add-opens","java.base/java.security.cert=ALL-UNNAMED",
                "--add-opens","java.base/java.text=ALL-UNNAMED",
                "--add-opens","java.base/java.net=ALL-UNNAMED",
                "--add-opens","java.base/java.nio=ALL-UNNAMED",
                "--add-opens","java.base/java.nio.charset=ALL-UNNAMED",
                "--add-opens","java.base/java.nio.file=ALL-UNNAMED",
                "--add-opens","java.base/sun.nio.fs=ALL-UNNAMED",
                "--add-opens","java.base/sun.security.x509=ALL-UNNAMED",
                "--add-opens","java.base/java.util.regex=ALL-UNNAMED",
                "--add-opens","java.base/java.util.stream=ALL-UNNAMED",
                "--add-opens","java.base/java.util.concurrent=ALL-UNNAMED",
                "--add-opens","java.base/java.util.concurrent.atomic=ALL-UNNAMED",
                "--add-opens","java.base/java.util.concurrent.locks=ALL-UNNAMED",
                "--add-opens","java.base/java.time=ALL-UNNAMED",
                "--add-opens","java.base/java.util=ALL-UNNAMED",
                "--add-opens","java.base/java.io=ALL-UNNAMED",
                "--add-opens","java.base/java.lang=ALL-UNNAMED"
    }
    tasks.withType(JavaCompile) {
        configure(options) {
            options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked' << '-Werror'
        }
    }
}

dependencies {
    // Non-dev dependencies (redistributed with releases)
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'com.deque.android:axe-android:0.2.0'
    implementation 'com.google.android.apps.common.testing.accessibility.framework:accessibility-test-framework:3.1.1'
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation 'com.google.guava:guava:30.1.1-android'

    // Dev dependencies (not redistributed)
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0')
    lintClassPath 'org.apache.commons:commons-compress:1.21'
    lintClassPath 'org.bouncycastle:bcpkix-jdk15on:1.69'
    lintClassPath 'org.bouncycastle:bcprov-jdk15on:1.69'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.11.2'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
    testImplementation 'org.powermock:powermock-core:2.0.9'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
}

configurations.all {
    resolutionStrategy {
        force 'commons-codec:commons-codec:1.15'
        force 'junit:junit:4.13.1'
    }
}

dependencyLocking {
    lockAllConfigurations()
}